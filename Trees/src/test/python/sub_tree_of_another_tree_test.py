
# Generated by CodiumAI
from TreeNode import TreeNode
from sub_tree_of_another_tree import Solution
import unittest

class TestIssubtree(unittest.TestCase):

    # subRoot is an exact subtree of root
    def test_subroot_is_exact_subtree(self):
        root = TreeNode(3, TreeNode(4, TreeNode(1), TreeNode(2)), TreeNode(5))
        subRoot = TreeNode(4, TreeNode(1), TreeNode(2))
        solution = Solution()
        self.assertTrue(solution.isSubTree(root, subRoot))

    # subRoot is the same as root
    def test_subroot_is_same_as_root(self):
        root = TreeNode(3, TreeNode(4, TreeNode(1), TreeNode(2)), TreeNode(5))
        subRoot = root
        solution = Solution()
        self.assertTrue(solution.isSubTree(root, subRoot))

    # subRoot is a leaf node present in root
    def test_subroot_is_leaf_node_present_in_root(self):
        root = TreeNode(3, TreeNode(4, TreeNode(1), TreeNode(2)), TreeNode(5))
        subRoot = TreeNode(1)
        solution = Solution()
        self.assertTrue(solution.isSubTree(root, subRoot))

    # subRoot is a subtree located at the left child of root
    def test_subroot_is_left_child_subtree(self):
        root = TreeNode(3, TreeNode(4, TreeNode(1), TreeNode(2)), TreeNode(5))
        subRoot = TreeNode(4, TreeNode(1), TreeNode(2))
        solution = Solution()
        self.assertTrue(solution.isSubTree(root.left, subRoot))

    # subRoot is None
    def test_subroot_is_none(self):
        root = TreeNode(3, TreeNode(4, TreeNode(1), TreeNode(2)), TreeNode(5))
        subRoot = None
        solution = Solution()
        self.assertTrue(solution.isSubTree(root, subRoot))

    # root is None
    def test_root_is_none(self):
        root = None
        subRoot = TreeNode(1)
        solution = Solution()
        self.assertFalse(solution.isSubTree(root, subRoot))

    # subRoot is larger than root
    def test_subroot_larger_than_root(self):
        root = TreeNode(1)
        subRoot = TreeNode(3, TreeNode(4, TreeNode(1), TreeNode(2)), TreeNode(5))
        solution = Solution()
        self.assertFalse(solution.isSubTree(root, subRoot))

    # subRoot is not present in root
    def test_subroot_not_present_in_root(self):
        root = TreeNode(3, TreeNode(4, TreeNode(1), TreeNode(2)), TreeNode(5))
        subRoot = TreeNode(6)
        solution = Solution()
        self.assertFalse(solution.isSubTree(root, subRoot))